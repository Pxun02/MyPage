---
import { getCollection } from 'astro:content';
import '../../../styles/blog.css';
import { basename } from 'path';
import Head from '../../../components/jp/Head.astro';
import Header from '../../../components/jp/Header.astro';

export async function getStaticPaths() {
  const blogEntries = await getCollection('blog');
  return blogEntries.map(entry => ({
    params: { slug: entry.slug }, props: { entry },
  }));
}

const blogEntries = await getCollection('blog');
const totalEntries = blogEntries.length;
const entriesPerPage = 10;

const { entry } = Astro.props;
const { Content } = await entry.render();

const currentPage = parseInt(basename(Astro.url.pathname));
const currentTopPage = Math.floor((totalEntries - currentPage) / entriesPerPage) + 1;

---

<html lang="ja">
  <Head pageTitle=`ブログ | ${entry.data.date.toLocaleDateString("ja-JP")}`/>
	<body>
		<Header />
		<header>
			<h1 style="padding-top: 1.5rem;">ブログ</h1>
      <nav>
				<a href=`/MyPage/jp/blog/page-${currentTopPage}`><i class="fa-solid fa-house"></i></a>
			</nav>
      <nav class="pagination">
				{currentPage < totalEntries ? (
				  <a href={`/MyPage/jp/blog/${currentPage + 1}`} class="prev-page">
					<i class="fas fa-chevron-left"></i> 次の記事
				  </a>
				): <span></span>}
				{currentPage > 1 ? (
				   <a href={`/MyPage/jp/blog/${currentPage - 1}`} class="next-page">
					前の記事 <i class="fas fa-chevron-right"></i>
				  </a>
				): <span></span>}
			  </nav>
			<hr class="header-line">
		</header>
<body>
  <h1>{entry.data.title}</h1>
  <p>投稿日: {entry.data.date.toLocaleDateString("ja-JP")}</p>
  <Content />
</body>
<footer>
  <button id="scrollToTopBtn" aria-label="Scroll to top"><i class="fa-solid fa-chevron-up"></i></button>
      <hr class="footer-line">
  <div class="footer-content"> <p>© 2025 Shawn</p></div>
</footer>
<script>
  document.addEventListener('DOMContentLoaded', (event) => {
    const menuToggle = document.querySelector('.ribbon .menu-toggle');
    const menu = document.querySelector('.ribbon .menu');

    if (menuToggle && menu) {
    menuToggle.addEventListener('click', () => {
      menu.classList.toggle('active');
    });
    }
  });
  function setupScrollToTop() {
    const scrollToTopBtn = document.getElementById('scrollToTopBtn');

    if (!scrollToTopBtn) return;

    const scrollFunction = () => {
    if (document.body.scrollTop > 20 || document.documentElement.scrollTop > 20) {
      scrollToTopBtn.classList.add('show');
    } else {
      scrollToTopBtn.classList.remove('show');
    }
    };

    const scrollToTop = () => {
    window.scrollTo({
      top: 0,
      behavior: 'smooth'
    });
    };

    window.addEventListener('scroll', scrollFunction);
    scrollToTopBtn.addEventListener('click', scrollToTop);
  }

  // Run setup on initial load
  setupScrollToTop();

  // Re-run setup on view transitions
  document.addEventListener('astro:after-swap', setupScrollToTop);
</script>
</html>